@page "/"
@inject IConfiguration _config
@inject IOptions<EmailSettingsOptions> _emailSettingsOptions

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<p>
    MySetting Value: @mySetting
</p>
<p>
    SubSetting Value: @subSetting
</p>
<p>
    SubSubSetting Value: @subSubSetting
</p>
<p>
    Connection String: @connectionString
</p>
<p>
    User Name: @userName
</p>
<p>
    User Password: @userPw
</p>
<p>
    Enable Mail System: @emailSettings.EnableMailSystem<br />
    Email Time Out In Seconds: @emailSettings.EmailTimeOutInSeconds<br />
    Email Servers:
    @foreach(var server in @emailSettings.EmailServers)
    {
        @server @:&nbsp;
    }
    <br />
    Email Admin: @emailSettings.EmailAdmin.FirstName @emailSettings.EmailAdmin.LastName
</p>

@code {
    string mySetting = "";
    string subSetting = "";
    string subSubSetting = "";
    string connectionString = "";
    string userName = "";
    string userPw = "";
    EmailSettingsOptions emailSettings = new EmailSettingsOptions();

    protected override void OnInitialized()
    {
        mySetting = _config.GetValue<string>("MySetting");
        subSetting = _config.GetValue<string>("MainSetting:SubSetting");
        subSubSetting = _config.GetValue<string>("MainSetting:SubSection:SubSubSetting");
        connectionString = _config.GetConnectionString("Default");
        userName = _config.GetValue<string>("SmtpKeys:UserName");
        userPw = _config.GetValue<string>("SmtpKeys:UserPw");

        /* This reads ALL values from the EmailSettings section in our appsettings.json file
         * and maps the values to our EmailSettingsOptions class properties.
         */
        //emailSettings = _config.GetSection("EmailSettings").Get<EmailSettingsOptions>();

        /* This is the same as above.  We are using DI to get the values.  We added a
         * builder.Service.Configure line in Program.cs and then the @inject at the top of this page.
         */
        emailSettings = _emailSettingsOptions.Value;
    }
}


